openapi: 3.0.2
info:
  title: Tracing App Backend API
  version: 0.1.0
servers:
  - url: "https://vivacoronia.herokuapp.com"
    description: Production server
  - url: "http://localhost:3000"
    description: Development server on localhost
tags:
  - name: Location Tracking
    description: Manage location tracking data
  - name: Infections
    description: Manage infections status
  - name: Contact Tracing
    description: Retrieve information about contact with infected persons
  - name: Trading
    description: Manage product offers, needs, store inventories and available categories

paths:
  /user/:
    post:
      tags: [User Creation and Authentication]
      description: Returns a new unique userId
      requestBody:
        description: Password for user account
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: "#/components/schemas/Password"
            examples:
              exPassword:
                $ref: "#/components/examples/exPassword"
      responses:
        "200":
          description: Unique userId
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/UserId"
              examples:
                newUser:
                  $ref: "#/components/examples/newUserId"

  /user/{userId}/login/:
    post:
      tags: [User Creation and Authentication]
      description: Returns a new JWT for a specific userId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: "#/components/schemas/Password"
            examples:
              exPassw:
                $ref: "#components/examples/exPassword"
      responses:
        "200":
          description: JSON Web Token
          content:
            application/json:
              schema:
                type: string
                items: "#components/schemas/JWT"
              examples:
                newJWT:
                  $ref: "#/components/examples/newJWT"
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user
          schema:
            $ref: "#/components/schemas/userId"

  /user/{userId}/:
    patch:
      tags: [Admin feature granting]
      description: Grants admin status to user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: "#/components/schemas/AdminStatus"
            examples:
              userAdminPatch:
                $ref: "#components/examples/adminStatus"
      responses:
        "201":
          description: "Granted"
        "400":
          description: "Invalid arguments"
        "401":
          description: "Not root admin"
      parameters:
        - name: adminjwt
          in: header
          schema:
            type: string
          required: true
        - name: userId
          in: path
          required: true
          description: The id of the user
          schema:
            $ref: "#/components/schemas/userId"

    get:
      tags: [User Information]
      description:  Get user specific informations
      responses:
        "200":
          description: Return status information of user
          content:
            application/json:
              schema:
                type: object
                items: "#components/schemas/AdminStatus"
              examples:
                adminStatus:
                  $ref: "#/components/examples/adminStatus"
        "400":
          description: Incorrect userId
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user
          schema:
            $ref: "#/components/schemas/userId"
        - name: jwt
          in: header
          schema:
            type: string
          required: true

  /admin/{userId}/login/:
    post:
      tags: [Admin authentication]
      description: Returns a new JWT for admin functionality
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: "#/components/schemas/password"
            examples:
              exAdminPatch:
                $ref: "#components/examples/exPassword"
      responses:
        "200":
          description: JSON Web Token
          content:
            application/json:
              schema:
                type: string
                items: "#components/schemas/JWT"
              examples:
                newJWT:
                  $ref: "#/components/examples/newJWT"
        "401":
          description: No admin rights
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user
          schema:
            $ref: "#/components/schemas/userId"

  /locations/:
    get:
      tags: [Location Tracking]
      description: Returns the list of all location records of all users in given distance around given coordinates
      responses:
        "200":
          description: JSON array with location records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LocationRecord"
              examples:
                twoelems:
                  $ref: "#/components/examples/locationRecordArray"
    parameters:
      - name: latitude
        in: query
        schema:
          $ref: "#/components/schemas/lat_long"
      - name: longitude
        in: query
        schema:
          $ref: "#/components/schemas/lat_long"
      - name: distance
        in: query
        schema:
          $ref: "#/components/schemas/distance"
      - name: adminjwt
        in: header
        schema:
          type: string
        required: true

  /locations/{userId}/:
    get:
      tags: [Location Tracking]
      description: Returns the list of locations of the specified user
      responses:
        "200":
          description: JSON array with location records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LocationRecord"
              examples:
                twoelems:
                  $ref: "#/components/examples/locationRecordArray"
                empty:
                  $ref: "#/components/examples/emptyArrayExample"
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user
          schema:
            $ref: "#/components/schemas/userId"
        - name: start
          in: query
          schema:
            $ref: "#/components/schemas/date"
        - name: end
          in: query
          schema:
            $ref: "#/components/schemas/date"
    post:
      tags: [Location Tracking]
      description: "Adds location records"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/location"
            examples:
              twoelems:
                $ref: "#/components/examples/locationArrayExample"
      responses:
        "201":
          description: Created
    parameters:
      - name: userId
        in: path
        required: true
        description: The id of the user
        schema:
          $ref: "#/components/schemas/userId"
      - name: jwt
        in: header
        schema:
          type: string
        required: true

  /infection/{userId}/:
    get:
      tags: [Infections]
      description: Get the latest infection status of the specified user, ordered by date of test
      responses:
        "200":
          description: Returns the data of the latest infection status containing Status, approximated infection time and time of test
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetInfectionRecordDto"

    post:
      tags: [Infections]
      description: Update the infection status of the specified user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInfectionRecordDto"
      responses:
        "201":
          description: Created

    parameters:
      - name: userId
        in: path
        required: true
        description: The id of the user
        schema:
          $ref: "#/components/schemas/userId"
      - name: jwt
        in: header
        schema:
          type: string
        required: true

  /contacts/:
    get:
      tags: [Contact Tracing]
      description: Get all records of contact with infected users
      responses:
        "200":
          description: Successful retrieval of all contact records.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContactRecord"
      parameters:
        - name: adminjwt
          in: header
          schema:
            type: string
          required: true

  /trading/offers/:
    get:
      tags: [Trading]
      description: Retrieve offers by query parameters. Provide either both or none of latitude and longitude. They are also required when using radius
      responses:
        "200":
          description: Array of ProductOfferRecords
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductOfferRecord"
      parameters:
        - name: userId
          in: query
          schema:
            $ref: "#/components/schemas/userId"
        - name: product
          in: query
          schema:
            $ref: "#/components/schemas/product"
        - name: productCategory
          in: query
          schema:
            $ref: "#/components/schemas/productCategory"
        - name: longitude
          in: query
          schema:
            $ref: "#/components/schemas/lat_long"
        - name: latitude
          in: query
          schema:
            $ref: "#/components/schemas/lat_long"
        - name: radiusInKm
          in: query
          schema:
            type: integer
          example: 10000
          description: Maximum radius in kilometers, default is unlimited
        - name: includeInactive
          in: query
          schema:
            type: boolean
          example: true
          description: if true returns inactive (deleted/sold) offers as well, default is false
        - name: sortBy
          in: query
          schema:
            type: string
            enum:
              - name
              - distance
              - price
        - name: priceMin
          in: query
          schema:
            type: double
        - name: priceMax
          in: query
          schema:
            type: double

    post:
      tags: [Trading]
      description: Add a new offer. Ignores the _id attribute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductOfferRecord"
      responses:
        "201":
          description: Created
        "400":
          description: Error creating the offer record
      parameters:
        - name: jwt
          in: header
          schema:
            type: string
          required: true

  /trading/offers/{offerId}:
    patch:
      tags: [Trading]
      description: Update an already existing offer, i.e. change or delete it. Only provide the properties to change
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductOfferRecord"
              description: Only the properites to change need to be provided
      responses:
        "200":
          description: Returns the complete succesfully changed offer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductOfferRecord"
        "404":
          description: The offer with the provided Id does not exist
        "400":
          description: Either offerId was not specified in the url path or there was another error
      parameters:
        - name: offerId
          in: path
          required: true
          description: The id of the offer
          schema:
            $ref: "#/components/schemas/offerId"
        - name: jwt
          in: header
          schema:
            type: string
          required: true

  /trading/categories/:
    get:
      tags: [Trading]
      description: Returns all available categories
      responses:
        "200":
          description: OK
          content:
            application/json:
              type: array
              items:
                $ref: "#/components/schemas/productCategory"
              example: ["foods", "hygiene", "protection"]
    post:
      tags: [Trading]
      description: Adds a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              example:
                name: foods
      responses:
        "201":
          description: Successfully added the category
        "400":
          description: property \"name\" was not specified
        "500":
          description: An error ocurred
      parameters:
        - name: adminjwt
          in: header
          schema:
            type: string
          required: true
  
  /trading/needs/:
    get:
      tags: [Trading]
      description: Retrieve needs by query parameters. Provide either both or none of latitude and longitude. They are also required when using radius
      responses:
        "200":
          description: Array of ProductNeedRecords
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductNeedRecord"
      parameters:
        - name: jwt
          in: header
          schema:
            type: string
          required: true
        - name: userId
          in: query
          schema:
            $ref: "#/components/schemas/userId"
        - name: product
          in: query
          schema:
            $ref: "#/components/schemas/product"
        - name: productCategory
          in: query
          schema:
            $ref: "#/components/schemas/productCategory" 
        - name: longitude
          in: query
          schema:
            $ref: "#/components/schemas/lat_long"
        - name: latitude
          in: query
          schema:
            $ref: "#/components/schemas/lat_long"
        - name: radius
          in: query
          schema:
            type: int64
          example: 10000
          description: Radius in meters, default is 25000
        - name: includeInactive
          in: query
          schema:
            type: boolean
          example: true
          description: if true returns inactive (deleted/fulfilled) offers as well, default is false
          
    post:
      tags: [Trading]
      description: Adds a new product need
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductNeedRecord"
      responses:
        "201":
          description: Created
        "400":
          description: Error creating the product need record
      parameters:
        - name: jwt
          in: header
          schema:
            type: string
          required: true
  
  /trading/needs/{needId}:
    patch:
      tags: [Trading]
      description: delete an already existing need.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                fulfilled: 
                  type: boolean
                  example: true
                  description: only property fulfilled is necessary
      responses:
        "200":
          description: Returns the complete succesfully changed offer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductNeedRecord"
        "404":
          description: The need with the provided Id does not exist
        "400":
          description: Either needId was not specified in the url path or there was another error
      parameters:
        - name: jwt
          in: header
          schema:
            type: string
          required: true
        - name: needId
          in: path
          required: true
          description: The id of the need
          schema:
            $ref: "#/components/schemas/needId"   

components:
  schemas:
    UserId:
      type: object
      description: Schema for user id object
      example:
        userId: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        time: "2020-05-21T21:39:08+02:00"
      properties:
        userId:
          $ref: "#components/schemas/userId"
        time:
          type: string
          format: date-time

    JWT:
      type: object
      description: example JWT
      example:
        jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      properties:
        jwt:
          type: string

    Password:
      type: object
      description: schema for password string
      example:
        password: "abc123!ZY_5"
      properties:
        password:
          $ref: "#/components/schemas/password"

    AdminStatus:
      type: object
      description: schema for admin status
      example:
        isAdmin: true
      properties:
        isAdmin:
          $ref: "#components/schemas/isAdmin"

    LocationRecord:
      type: object
      description: Location record with location and userId
      example:
        userId: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        time: "2020-05-21T21:39:08+02:00"
        location:
          type: "Point"
          coordinates:
            - 8.454
            - 50.225
      properties:
        userId:
          $ref: "#/components/schemas/userId"
        time:
          type: string
          format: date-time
        location:
          $ref: "#/components/schemas/GeoJSONPoint2D"

    location:
      type: object
      description: GeoJSONPoint2D along with timestamp
      properties:
        time:
          type: string
          format: date-time
          example: "2020-05-21T21:39:08+02:00"
        location:
          $ref: "#/components/schemas/GeoJSONPoint2D"
      example:
        time: 2020-05-21T19:39:08.000Z
        location:
          type: "Point"
          coordinates:
            - -122.96
            - 50.114

    GeoJSONPoint2D:
      type: object
      description: Geo coordinates of a point on a map
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          items:
            type: number
            maxItems: 2
            minItems: 2
      example:
        type: "Point"
        coordinates:
          - -122.96
          - 50.114

    userId:
      type: string

    password:
      type: string
    
    isAdmin:
      type: boolean

    lat_long:
      type: number
      format: double
      example: 8.454

    distance:
      type: integer
      format: int64
      example: 500

    date:
      type: date
      format: string
      example: Thu Jul 09 02:00:00 GMT+02:00 2020

    GetInfectionRecordDto:
      type: object
      description: Object with data containing an infection status.
      example:
        newStatus: "infected"
        dateOfTest: "2020-05-12T00:00:00.000Z"
        occuredDateEstimation: "2020-05-11T00:00:00.000Z"
      properties:
        newStatus:
          type: string
        dateOfTest:
          type: string
          format: date-time
        occuredDateEstimation:
          type: string
          format: date-time

    PostInfectionRecordDto:
      type: object
      description: Object with data for updating an infection status.
      example:
        newStatus: "infected"
        dateOfTest: "2020-05-12T00:00:00.000Z"
        occuredDateEstimation: "2020-05-11T00:00:00.000Z"
        signature: "1234567890abcdef"
      properties:
        newStatus:
          type: string
        dateOfTest:
          type: string
          format: date-time
        occuredDateEstimation:
          type: string
          format: date-time
        signature:
          format: string

    ContactRecord:
      type: object
      description: Records of contact with an infected user.
      properties:
        userId:
          $ref: "#/components/schemas/userId"
        infectedUserId:
          $ref: "#/components/schemas/userId"
        locationRecord:
          $ref: "#/components/schemas/LocationRecord"
      example:
        userId: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpabcJ9"
        infectedUserId: "fDthGGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        locationRecord:
          userId: "fDthGGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          time: "2020-05-21T21:39:08+02:00"
          location:
            type: Point
            coordinates:
              - 8.454
              - 50.225

    ProductOfferRecord:
      type: object
      description: Contains details about a product offer provided by a user
      properties:
        _id:
          $ref: "#/components/schemas/offerId"
        userId:
          $ref: "#/components/schemas/userId"
        product:
          $ref: "#/components/schemas/product"
        amount:
          type: number
          description: How much of the product is offered (1 time, 2 times, 5 times)
          example: 5
        productCategory:
          $ref: "#/components/schemas/productCategory"
        price:
          type: double
          example: 8.50
          description: Price per piece
        details: 
          type: string
          details: Additional information or description of the offer or product
        location:
          $ref: "#/components/schemas/GeoJSONPoint2D"
        deactivatedAt:
          type: string
          format: date-time
          description: Timestamp of deactivation, if this offer is not available anymore, else null
        sold:
          type: boolean
          description: True if this product has sold, false if it was deleted without being sold. Only valid if deactivatedAt is not null.
        phoneNumber:
          type: string
          example: "+49 6151 16 23190"

    ProductNeedRecord:
      type: object
      description: Contains details about a product need provided by a user
      properties:
        _id: 
          $ref: "#/components/schemas/needId"
        userId: 
          $ref: "#/components/schemas/userId"
        product: 
          type: string
          $ref: "#/components/schemas/product"
        productCategory: 
          type: string
          $ref: "#/components/schemas/productCategory"
        amount:
          type: number
          description: How much of the product is offered (1 time, 2 times, 5 times)
          example: 5
        location: 
          $ref: "#/components/schemas/GeoJSONPoint2D"
        deactivatedAt: 
          type: string
          format: date-time
          description: Timestamp of deactivation
        fulfilled: 
          type: boolean
          description: True if this product need is fullfilled

    product:
      type: string
      example: Flour 1kg

    productCategory:
      type: string
      description: Must be one of the categories already available (see getCategories), if not POST category
      example: foods

    offerId:
      type: string
      example: 5f0eb3935f839100238c0fcb

    needId:
      type: string
      example: 5f22c05fa920c7004af2a477
    
    
  examples:
    locationArrayExample:
      summary: Array with two location ojects
    newUserId:
      summary: Json Object with the new user id and the creation time
      value:
        userId: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        time: "2020-06-11T17:51:30.000Z"

    newJWT:
      value:
        jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    exPassword:
      summary: Json object with the password string for a user account
      value:
        password: "abc123!ZY_5"

    adminStatus:
      value:
        isAdmin: "true"

    geoJsonPoint2DArrayExample:
      summary: Array with two GeoJSON Point2D ojects
      value:
        - time: 2020-05-21T19:39:08.000Z
          location:
            type: "Point"
            coordinates:
              - -122.96
              - 50.114
        - time: 2020-04-12T21:50:42.000Z
          location:
            type: "Point"
            coordinates:
              - 8.454
              - 50.225

    locationRecordArray:
      summary: Array with two locations including userId, i.e. two location records
      value:
        - userId: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          time: 2020-05-21T19:39:08.000Z
          location:
            type: "Point"
            coordinates:
              - -122.96
              - 50.114
        - userId: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ5"
          time: 2020-04-12T21:50:42.000Z
          location:
            type: "Point"
            coordinates:
              - 8.454
              - 50.225

    emptyArrayExample:
      summary: Empty Array
      value: []
